class Solution {
    private int[] parent;
    private int[] disFromRoot;

    private void dfsFromRoot(List<Integer>[] adj, int currNode, int par, int dis) {
        disFromRoot[currNode] = dis;
        parent[currNode] = par;

        for (int neighbour : adj[currNode]) {
            if (neighbour != par) {
                dfsFromRoot(adj, neighbour, currNode, dis + 1);
            }
        }
    }

    private int maximumPathSum(List<Integer>[] adj, int[] amount, int node, int parent) {
        int currAmount = amount[node];
        int maxAmountFromChild = Integer.MIN_VALUE;

        for (int child : adj[node]) {
            if (child != parent) {
                maxAmountFromChild = Math.max(maxAmountFromChild, maximumPathSum(adj, amount, child, node));
            }
        }
        if (maxAmountFromChild == Integer.MIN_VALUE) {
            return currAmount;
        }
        return currAmount + maxAmountFromChild;
    }

    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {
        int n = amount.length;
        List<Integer>[] adj = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int[] e : edges) {
            adj[e[0]].add(e[1]);
            adj[e[1]].add(e[0]);
        }

        parent = new int[n];
        disFromRoot = new int[n];
        dfsFromRoot(adj, 0, 0, 0);

        int bobCurrNode = bob;
        int bobDis = 0;

        while (bobCurrNode != 0) { // when bobCurrNode = 0 means it reached root
            if (disFromRoot[bobCurrNode] > bobDis) {
                amount[bobCurrNode] = 0; // bob will consume it first
            } else if (disFromRoot[bobCurrNode] == bobDis) {
                amount[bobCurrNode] /= 2;
            }
            bobCurrNode = parent[bobCurrNode];
            bobDis++;
        }

        return maximumPathSum(adj, amount, 0, 0);
    }
}
